from typing import List
from models import CategoryItem
from datetime import datetime


class MarkdownService:
    
    def generate_summary_markdown(self, categories: List[CategoryItem], title: str = "作業時間サマリー") -> str:
        if not categories:
            return self._generate_empty_summary(title)
        
        total_duration_ms = sum(cat.total_duration_ms for cat in categories)
        total_hours = total_duration_ms / 3600000
        
        markdown_lines = []
        markdown_lines.append(f"# {title}")
        markdown_lines.append("")
        markdown_lines.append(f"**生成日時**: {datetime.now().strftime('%Y年%m月%d日 %H:%M')}")
        markdown_lines.append(f"**総作業時間**: {total_hours:.1f}時間")
        markdown_lines.append("")
        
        # カテゴリ別サマリーテーブル
        markdown_lines.append("## カテゴリ別作業時間")
        markdown_lines.append("")
        markdown_lines.append("| カテゴリ | 小項目 | 作業時間 | 割合 |")
        markdown_lines.append("|----------|--------|----------|------|")
        
        # カテゴリを作業時間の多い順にソート
        sorted_categories = sorted(categories, key=lambda x: x.total_duration_ms, reverse=True)
        
        for category in sorted_categories:
            hours = category.total_duration_ms / 3600000
            percentage = (category.total_duration_ms / total_duration_ms) * 100 if total_duration_ms > 0 else 0
            markdown_lines.append(f"| {category.category} | {category.subcategory} | {hours:.1f}h | {percentage:.1f}% |")
        
        markdown_lines.append("")
        
        # カテゴリ別詳細
        markdown_lines.append("## カテゴリ別詳細")
        markdown_lines.append("")
        
        # カテゴリごとにグループ化
        category_groups = {}
        for cat in sorted_categories:
            if cat.category not in category_groups:
                category_groups[cat.category] = []
            category_groups[cat.category].append(cat)
        
        for category_name, items in category_groups.items():
            category_total_ms = sum(item.total_duration_ms for item in items)
            category_hours = category_total_ms / 3600000
            category_percentage = (category_total_ms / total_duration_ms) * 100 if total_duration_ms > 0 else 0
            
            markdown_lines.append(f"### {category_name} ({category_hours:.1f}h, {category_percentage:.1f}%)")
            markdown_lines.append("")
            
            if len(items) > 1:
                for item in items:
                    item_hours = item.total_duration_ms / 3600000
                    item_percentage = (item.total_duration_ms / category_total_ms) * 100 if category_total_ms > 0 else 0
                    markdown_lines.append(f"- **{item.subcategory}**: {item_hours:.1f}h ({item_percentage:.1f}%)")
                markdown_lines.append("")
            else:
                item = items[0]
                item_hours = item.total_duration_ms / 3600000
                markdown_lines.append(f"**{item.subcategory}**: {item_hours:.1f}h")
                markdown_lines.append("")
        
        # フッター
        markdown_lines.append("---")
        markdown_lines.append("")
        markdown_lines.append("*Generated by Task Tracker LLM*")
        
        return "\n".join(markdown_lines)
    
    def _generate_empty_summary(self, title: str) -> str:
        markdown_lines = []
        markdown_lines.append(f"# {title}")
        markdown_lines.append("")
        markdown_lines.append(f"**生成日時**: {datetime.now().strftime('%Y年%m月%d日 %H:%M')}")
        markdown_lines.append("**総作業時間**: 0.0時間")
        markdown_lines.append("")
        markdown_lines.append("## 記録された作業はありません")
        markdown_lines.append("")
        markdown_lines.append("作業を開始して時間を記録してください。")
        markdown_lines.append("")
        markdown_lines.append("---")
        markdown_lines.append("")
        markdown_lines.append("*Generated by Task Tracker LLM*")
        
        return "\n".join(markdown_lines)