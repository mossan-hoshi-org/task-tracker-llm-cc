import pytest
import json
from fastapi.testclient import TestClient
from main import app, reset_gemini_service, reset_markdown_service


class TestMarkdownAPI:
    
    @pytest.fixture
    def client(self, monkeypatch):
        # テスト環境ではAPIキーを無効にしてモック機能を使用
        monkeypatch.setenv("GEMINI_API_KEY", "")
        reset_gemini_service()
        reset_markdown_service()
        return TestClient(app)
    
    def test_generate_markdown_from_summary_success(self, client):
        request_data = {
            "sessions": [
                {"task_name": "API開発", "duration_ms": 7200000},
                {"task_name": "テスト作成", "duration_ms": 3600000},
                {"task_name": "チーム会議", "duration_ms": 1800000}
            ]
        }
        
        response = client.post("/summary/markdown", json=request_data)
        assert response.status_code == 200
        assert response.headers["content-type"] == "text/plain; charset=utf-8"
        
        markdown_content = response.text
        
        # Markdownの基本構造をチェック
        assert "# 作業時間サマリー" in markdown_content
        assert "## カテゴリ別作業時間" in markdown_content
        assert "## カテゴリ別詳細" in markdown_content
        assert "Generated by Task Tracker LLM" in markdown_content
        
        # 総作業時間の計算をチェック（12600000ms = 3.5時間）
        assert "3.5時間" in markdown_content
        
        # テーブル形式をチェック
        assert "| カテゴリ | 小項目 | 作業時間 | 割合 |" in markdown_content
        assert "|----------|--------|----------|------|" in markdown_content
    
    def test_generate_markdown_from_summary_empty(self, client):
        request_data = {"sessions": []}
        
        response = client.post("/summary/markdown", json=request_data)
        assert response.status_code == 200
        
        markdown_content = response.text
        assert "# 作業時間サマリー" in markdown_content
        assert "総作業時間**: 0.0時間" in markdown_content
        assert "記録された作業はありません" in markdown_content
    
    def test_generate_markdown_with_japanese_tasks(self, client):
        request_data = {
            "sessions": [
                {"task_name": "機能要件の整理", "duration_ms": 5400000},
                {"task_name": "設計書作成", "duration_ms": 3600000},
                {"task_name": "実装作業", "duration_ms": 10800000},
                {"task_name": "単体テスト", "duration_ms": 7200000}
            ]
        }
        
        response = client.post("/summary/markdown", json=request_data)
        assert response.status_code == 200
        
        markdown_content = response.text
        # 総時間の確認（27000000ms = 7.5時間）
        assert "7.5時間" in markdown_content
        assert "開発" in markdown_content or "設計" in markdown_content
    
    def test_generate_markdown_from_categories_get(self, client):
        categories_data = [
            {
                "category": "開発",
                "subcategory": "実装", 
                "total_duration_ms": 7200000
            },
            {
                "category": "会議",
                "subcategory": "チーム会議",
                "total_duration_ms": 1800000
            }
        ]
        
        response = client.get(
            "/summary/markdown",
            params={"categories": json.dumps(categories_data)}
        )
        assert response.status_code == 200
        
        markdown_content = response.text
        assert "# 作業時間サマリー" in markdown_content
        assert "2.5時間" in markdown_content  # 9000000ms = 2.5時間
        assert "開発" in markdown_content
        assert "会議" in markdown_content
    
    def test_generate_markdown_invalid_categories_format(self, client):
        response = client.get(
            "/summary/markdown",
            params={"categories": "invalid_json"}
        )
        assert response.status_code == 400
        assert "Invalid category data" in response.json()["detail"]
    
    def test_generate_markdown_missing_categories_param(self, client):
        response = client.get("/summary/markdown")
        assert response.status_code == 422
        
        error_detail = response.json()["detail"]
        assert any("Field required" in str(error) for error in error_detail)
    
    def test_markdown_content_structure(self, client):
        request_data = {
            "sessions": [
                {"task_name": "フロントエンド開発", "duration_ms": 10800000},
                {"task_name": "バックエンドAPI実装", "duration_ms": 14400000},
                {"task_name": "デバッグ作業", "duration_ms": 5400000}
            ]
        }
        
        response = client.post("/summary/markdown", json=request_data)
        markdown_content = response.text
        
        # 時間の計算確認（30600000ms = 8.5時間）
        assert "8.5時間" in markdown_content
        
        # 日時フォーマットの確認
        assert "生成日時" in markdown_content
        assert "年" in markdown_content and "月" in markdown_content and "日" in markdown_content
        
        # パーセンテージ表示の確認
        assert "%" in markdown_content
        
        # Markdownの構造確認
        lines = markdown_content.split('\n')
        assert lines[0].startswith("# ")  # タイトル
        assert "---" in markdown_content   # セパレータ
    
    def test_markdown_category_sorting(self, client):
        request_data = {
            "sessions": [
                {"task_name": "短時間作業", "duration_ms": 900000},      # 15分
                {"task_name": "長時間作業", "duration_ms": 7200000},     # 2時間
                {"task_name": "中時間作業", "duration_ms": 3600000}      # 1時間
            ]
        }
        
        response = client.post("/summary/markdown", json=request_data)
        markdown_content = response.text
        
        # 総時間の確認（11700000ms = 3.25時間 ≈ 3.2時間）
        total_hours = (900000 + 7200000 + 3600000) / 3600000
        assert f"{total_hours:.1f}h" in markdown_content
        
        # 基本的なMarkdown構造の確認
        assert "## カテゴリ別作業時間" in markdown_content
        assert "| カテゴリ | 小項目 | 作業時間 | 割合 |" in markdown_content